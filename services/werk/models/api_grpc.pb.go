// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/api.proto

package models

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WerkClient is the client API for Werk service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WerkClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	Register(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	CreateImage(ctx context.Context, in *CreateImageRequest, opts ...grpc.CallOption) (*CreateImageResponse, error)
	RunVM(ctx context.Context, in *RunVMRequest, opts ...grpc.CallOption) (*RunVMResponse, error)
	GetVMState(ctx context.Context, in *GetVMSerialRequest, opts ...grpc.CallOption) (*GetVMStateResponse, error)
	KillVM(ctx context.Context, in *KillVMRequest, opts ...grpc.CallOption) (*KillVMResponse, error)
	GetSerial(ctx context.Context, in *GetVMSerialRequest, opts ...grpc.CallOption) (*GetVMSerialResponse, error)
}

type werkClient struct {
	cc grpc.ClientConnInterface
}

func NewWerkClient(cc grpc.ClientConnInterface) WerkClient {
	return &werkClient{cc}
}

func (c *werkClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/models.Werk/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *werkClient) Register(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/models.Werk/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *werkClient) CreateImage(ctx context.Context, in *CreateImageRequest, opts ...grpc.CallOption) (*CreateImageResponse, error) {
	out := new(CreateImageResponse)
	err := c.cc.Invoke(ctx, "/models.Werk/CreateImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *werkClient) RunVM(ctx context.Context, in *RunVMRequest, opts ...grpc.CallOption) (*RunVMResponse, error) {
	out := new(RunVMResponse)
	err := c.cc.Invoke(ctx, "/models.Werk/RunVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *werkClient) GetVMState(ctx context.Context, in *GetVMSerialRequest, opts ...grpc.CallOption) (*GetVMStateResponse, error) {
	out := new(GetVMStateResponse)
	err := c.cc.Invoke(ctx, "/models.Werk/GetVMState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *werkClient) KillVM(ctx context.Context, in *KillVMRequest, opts ...grpc.CallOption) (*KillVMResponse, error) {
	out := new(KillVMResponse)
	err := c.cc.Invoke(ctx, "/models.Werk/KillVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *werkClient) GetSerial(ctx context.Context, in *GetVMSerialRequest, opts ...grpc.CallOption) (*GetVMSerialResponse, error) {
	out := new(GetVMSerialResponse)
	err := c.cc.Invoke(ctx, "/models.Werk/GetSerial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WerkServer is the server API for Werk service.
// All implementations must embed UnimplementedWerkServer
// for forward compatibility
type WerkServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	Register(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	CreateImage(context.Context, *CreateImageRequest) (*CreateImageResponse, error)
	RunVM(context.Context, *RunVMRequest) (*RunVMResponse, error)
	GetVMState(context.Context, *GetVMSerialRequest) (*GetVMStateResponse, error)
	KillVM(context.Context, *KillVMRequest) (*KillVMResponse, error)
	GetSerial(context.Context, *GetVMSerialRequest) (*GetVMSerialResponse, error)
	mustEmbedUnimplementedWerkServer()
}

// UnimplementedWerkServer must be embedded to have forward compatible implementations.
type UnimplementedWerkServer struct {
}

func (UnimplementedWerkServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedWerkServer) Register(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedWerkServer) CreateImage(context.Context, *CreateImageRequest) (*CreateImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImage not implemented")
}
func (UnimplementedWerkServer) RunVM(context.Context, *RunVMRequest) (*RunVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunVM not implemented")
}
func (UnimplementedWerkServer) GetVMState(context.Context, *GetVMSerialRequest) (*GetVMStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVMState not implemented")
}
func (UnimplementedWerkServer) KillVM(context.Context, *KillVMRequest) (*KillVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillVM not implemented")
}
func (UnimplementedWerkServer) GetSerial(context.Context, *GetVMSerialRequest) (*GetVMSerialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSerial not implemented")
}
func (UnimplementedWerkServer) mustEmbedUnimplementedWerkServer() {}

// UnsafeWerkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WerkServer will
// result in compilation errors.
type UnsafeWerkServer interface {
	mustEmbedUnimplementedWerkServer()
}

func RegisterWerkServer(s grpc.ServiceRegistrar, srv WerkServer) {
	s.RegisterService(&Werk_ServiceDesc, srv)
}

func _Werk_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WerkServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.Werk/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WerkServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Werk_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WerkServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.Werk/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WerkServer).Register(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Werk_CreateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WerkServer).CreateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.Werk/CreateImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WerkServer).CreateImage(ctx, req.(*CreateImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Werk_RunVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WerkServer).RunVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.Werk/RunVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WerkServer).RunVM(ctx, req.(*RunVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Werk_GetVMState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVMSerialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WerkServer).GetVMState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.Werk/GetVMState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WerkServer).GetVMState(ctx, req.(*GetVMSerialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Werk_KillVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WerkServer).KillVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.Werk/KillVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WerkServer).KillVM(ctx, req.(*KillVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Werk_GetSerial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVMSerialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WerkServer).GetSerial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.Werk/GetSerial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WerkServer).GetSerial(ctx, req.(*GetVMSerialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Werk_ServiceDesc is the grpc.ServiceDesc for Werk service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Werk_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "models.Werk",
	HandlerType: (*WerkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Werk_Hello_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Werk_Register_Handler,
		},
		{
			MethodName: "CreateImage",
			Handler:    _Werk_CreateImage_Handler,
		},
		{
			MethodName: "RunVM",
			Handler:    _Werk_RunVM_Handler,
		},
		{
			MethodName: "GetVMState",
			Handler:    _Werk_GetVMState_Handler,
		},
		{
			MethodName: "KillVM",
			Handler:    _Werk_KillVM_Handler,
		},
		{
			MethodName: "GetSerial",
			Handler:    _Werk_GetSerial_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api.proto",
}
